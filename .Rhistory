getwd()
library(foreign)
MM = read.csv("D:/2021-fall course/Research Method/project/MM.cvs")
setwd(“D:\2021-fall course\Biostatistics\R”)
getwd()
knitr::opts_chunk$set(echo = TRUE)
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=FALSE}
```{r setup, include=TRUE}
```{r setup, include=TRUE}
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
# install.packages("haven")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("openxlsx")
# for SPSS (read_sav()), stata (read_dta()), SAS(read_sas()) and xpt (read_xpt()) files
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
#we can also use the pacman package that automatically checks for packages, installs them if not found, and opens the associated library onces installed
#install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
install.packages("pacman")
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
starbucks_csv <-
read_csv(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv"
)
# install.packages("haven")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("openxlsx")
# for SPSS (read_sav()), stata (read_dta()), SAS(read_sas()) and xpt (read_xpt()) files
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
#we can also use the pacman package that automatically checks for packages, installs them if not found, and opens the associated library onces installed
#install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
starbucks_csv <-
read_csv(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv"
)
starbucks_csv <-
read_csv(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv"
)
# install.packages("haven")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("openxlsx")
# for SPSS (read_sav()), stata (read_dta()), SAS(read_sas()) and xpt (read_xpt()) files
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
#we can also use the pacman package that automatically checks for packages, installs them if not found, and opens the associated library onces installed
#install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
library(haven)
library(readr)
install.packages("readr")
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
# install.packages("haven")
# install.packages("readr")
# install.packages("dplyr")
# install.packages("openxlsx")
# for SPSS (read_sav()), stata (read_dta()), SAS(read_sas()) and xpt (read_xpt()) files
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
#we can also use the pacman package that automatically checks for packages, installs them if not found, and opens the associated library onces installed
#install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
install.packages("pacman")
install.packages("pacman")
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
starbuck <- read_csv("https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv")
install.packages("pacman")
install.packages("pacman")
library(haven)
library(readr)
library(dplyr)
library(openxlsx)
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
install.packages("pacman")
starbucks_csv <-
read_csv(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_csv.csv"
)
install.packages("openxlsx")
starbucks_stata <-
read_dta(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_stata.dta?raw=true"
)
starbucks_stata <-
read_dta(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_stata.dta?raw=true"
)
starbucks_stata <-
read_dta(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_stata.dta?raw=true"
)
starbucks_stata <-
read_dta(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_stata.dta?raw=true"
)
library(haven)
starbucks_stata <-
read_dta(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_stata.dta?raw=true"
)
starbucks_tab <-
read.delim(
"https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201/Class%201%20demo/starbucks_datasets/starbuckstab_tab.txt"
)
starbucks_xpt <-
read_xpt(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbuck_xpt.xpt?raw=true"
)
# Interesting note about this format: "The SAS transport format is an open format,
# as is required for submission of the data to the FDA."
# (from help page when *??read_xpt* is typed into the console)
starbucks_spss <-
read_sav(
"https://github.com/kijohnson/ADA/blob/master/Class%201/Class%201%20demo/starbucks_datasets/starbucks_spss.sav?raw=true")
starbucks_spss <- read_sav("starbucks_spss.sav")
View(starbucks_xpt)
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
install.packages("pacman")
install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
pacman::p_load(haven, readr, dplyr, openxlsx)
View(starbucks_xpt)
dim(starbucks_xpt)
sapply(starbucks_xpt, typeof)
class(starbucks_xpt$DRINK)
colnames(starbucks_xpt)
#renames variables in order of appearance
names(starbucks_xpt)[1:7]<-c("drink", "category", "calories", "fat (g)",
"carb. (g)", "fiber (g)", "protein (g)")
colnames(starbucks_xpt)
View(starbucks_tab)
View(starbucks_tab)
View(starbucks_xpt)
View(starbucks_xpt)
View(starbucks_xpt)
View(starbucks_xpt)
#renames variables in order of appearance
names(starbucks_xpt)[2]<-c("cat")
colnames(starbucks_xpt)
starbucks_xpt<-rename(starbucks_xpt, c("CALORIES"="calories"))
class(starbucks_xpt$CALORIES)
starbucks_xpt$calories_n<-as.numeric(starbucks_xpt$CALORIES)
class(starbucks_xpt$calories_n)
#get summary stats
summary(starbucks_xpt$calories_n)
mean(starbucks_xpt$calories_n, na.rm=TRUE)
median(starbucks_xpt$calories_n, na.rm=TRUE)
sd(starbucks_xpt$calories_n, na.rm=TRUE)
var(starbucks_xpt$calories_n, na.rm=TRUE)
quantile(starbucks_xpt$calories_n, na.rm=TRUE)
#using the select function
starbucks_xpt2 <- starbucks_xpt %>%
dplyr::select(-CALORIES)
colnames(starbucks_xpt2)
starbucks_xpt<-rename(starbucks_xpt, c("category"="cat"))
colnames(starbucks_xpt)
starbucks_xpt4<-starbucks_xpt4[-1,]
starbucks_xpt4<-na.omit(starbucks_xpt)
starbucks_xpt4<-starbucks_xpt4[-1,]
starbucks_xpt$calories_med<-ifelse(starbucks_xpt$calories_n<=140, 0, ifelse(starbucks_xpt$calories_n>140, 1, NA))
View(starbucks_xpt)
View(starbucks_xpt)
starbucks_xpt<-starbucks_xpt %>%
mutate(calories_med=if_else(calories_n<=140, 0,
if_else(calories_n>140, 1, NULL)))
View(starbucks_stata)
View(starbucks_stata)
class(starbucks_xpt$calories_med)
starbucks_xpt$calories_med<-factor(starbucks_xpt$calories_med, levels=c(0,1),
labels = c("Less than or equal to the median", "Above the median"))
class(starbucks_xpt$calories_med)
table(starbucks_xpt$calories_med)
espresso<-starbucks_xpt[which(starbucks_xpt$category=='Starbucks Espresso Beverages'),]
View(espresso)
View(espresso)
table(starbucks_xpt$category)
dim(espresso)
mean(espresso$calories_n, na.rm=TRUE)
summary(espresso$calories_n)
espresso$calories_n[espresso$drink=='Brown Sugar Shortbread Latte']<-300
employ.data <- data.frame(employee, salary, startdate, stringsAsFactors = FALSE)
employee <- c('Trayan Klavdiya','Wasswa Tadesse','Jianhong Dong', "Mary Smith")
salary <- c(210000, 234000, 268000, 240000)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14', '2009-10-28'))
employ.data <- data.frame(employee, salary, startdate, stringsAsFactors = FALSE)
# the stringsAsFactors argument prevents R from turning character variables into factor variables
class(employ.data)
employ.data2<-cbind(employee, salary, startdate)
class(employ.data2)
employ.data2<-as.data.frame(employ.data2)
class(employ.data2)
coffee_pref<-c("dark", "light", "pumpkin spice", "likes tea")
employ.data<-cbind(employ.data, coffee_pref, stringsAsFactors = FALSE)
class(employ.data)
new_employee<-c('Martha Kuskowski', 240500, '2020-11-01', 'pumpkin spice')
employ.data<-rbind(employ.data, new_employee)
View(employ.data)
employee <- c('Trayan Klavdiya','Wasswa Tadesse','Jianhong Dong', "Mary Smith",
'Martha Kuskowski')
termdate<-as.Date(c('2021-11-1','2021-11-1','2021-11-1', '2021-11-1',
'2021-11-1'))
employ.data2<-data.frame(employee, termdate)
#merge employ.data and employ.data2 by employee name
all.employee.data<-merge(employ.data, employ.data2, by="employee")
all.employee.data$ID <- seq.int(nrow(all.employee.data))
View(employ.data)
all.employee.data<-all.employee.data[, c(6,1,2,3,4,5)]
View(all.employee.data)
View(all.employee.data)
View(all.employee.data)
all.employee.data<-all.employee.data[, c(1,2,3,4,5,6)]
View(all.employee.data)
all.employee.data<-all.employee.data[, c(1,2,3,4,5)]
View(all.employee.data)
all.employee.data<-all.employee.data[, c(1,2,3,4,5,6)]
all.employee.data<-all.employee.data[, c(2,3,4,5,1)]
View(all.employee.data)
all.employee.data$ID <- seq.int(nrow(all.employee.data))
View(employ.data)
all.employee.data$ID <- seq.int(nrow(all.employee.data))
View(employ.data)
View(all.employee.data)
View(all.employee.data)
all.employee.data$ID <- seq.int(nrow(all.employee.data))
View(all.employ.data)
all.employee.data$ID <- seq.int(nrow(all.employee.data))
View(all.employee.data)
all.employee.data<-all.employee.data[, c(5,2,3,4,1)]
View(all.employee.data)
# write an excel file
write.xlsx(all.employee.data, "all.employee.data.xlsx", overwrite=TRUE)
# write a csv file
write.csv(all.employee.data, "all.employee.data.csv")
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
library(openxlsx)
pacman::p_load(haven, readr, dplyr, openxlsx)
install.packages("pacman")
install.packages("pacman")
install.packages("pacman")
pacman::p_load(haven, readr, dplyr, openxlsx)
knitr::opts_chunk$set(echo = TRUE)
# for SPSS (read_sav()), stata (read_dta()), SAS(read_sas()) and xpt (read_xpt()) files
library(haven)
# for reading csv file (read_csv())
library(readr)
# for data management
library(dplyr)
#for exporting excel files
library(openxlsx)
C1survey <-
read_csv(
"https://raw.githubusercontent.com/kijohnson/ADA/master/Class%201%20Survey%20Fall%202022.csv"
)
View(C1survey)
View(C1survey)
dim(C1survey)
View(C1survey)
View(C1survey)
names(C1survey)[1:5]<-c("like_cats", "like_dogs", "island_choice", "slogan_choice",
"favorite_day")
colnames(starbucks_xpt)
colnames(starbucks_xpt)
colnames(C1survey)
a<- [1,5]
a <- C1survey[1,5]
View(a)
a <- C1survey[0,1]
View(a)
View(a)
View(a)
3. a. Rename the column variables to something shorter and that is descriptive of what the variable is about (for example like_dogs for the ‘Do you like dogs?’ question variable) and b. Display that they are renamed.
3. a. Rename the column variables to something shorter and that is descriptive of what the variable is about (for example like_dogs for the ‘Do you like dogs?’ question variable) and b. Display that they are renamed.
#2. Determine: a. the number of observations (i.e. the number of people who filled out the survey) and b. the number of variables in the dataframe.
dim(C1survey)
#3. a. Rename the column variables to something shorter and that is descriptive of what the variable is about (for example like_dogs for the ‘Do you like dogs?’ question variable) and b. Display that they are renamed.
names(C1survey)[1:5]<-c("like_cats", "like_dogs", "island_choice", "slogan_choice",
"favorite_day")
colnames(C1survey)
#4. Write code to determine and display the number of factor, integer, numerical, and character variables there are in the C1survey dataset.
class(C1survey)
#4. Write code to determine and display the number of factor, integer, numerical, and character variables there are in the C1survey dataset.
sapply(C1survey, typeof)
nlevels(C1survey)
sapply(C1survey, typeof)
nlevels(C1survey)
#5. a. Using code, check the bday and bmonth variables for any unusual or missing values. If you find any, b. describe what you will do with the unusual values in a comment before or immediately following the code that does it, and c. after you have cleaned up any unusual values, find the median bday and month. *Note: please make sure that your bday and month variables are numeric before doing statistics
names(C1survey)[22]<-c("bday")
names(C1survey)[23]<-c("bmonth")
class(C1survey)
class(C1survey$bday)
class(C1survey$bday[2])
C1survey$bday_n<-as.numeric(C1survey)
class(C1survey$bday)
C1survey$bday_n<-as.numeric(C1survey)
View(C1survey)
![](gitconfig.png){width=100%}
